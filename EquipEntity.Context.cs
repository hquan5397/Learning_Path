//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace API_16_3_2020
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EquipmentEntities : DbContext
    {
        public EquipmentEntities()
            : base("name=EquipmentEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<EQUIPMENT> EQUIPMENTs { get; set; }
        public virtual DbSet<REQUEST> REQUESTs { get; set; }
    
        public virtual int ASSIGN_TO_EMPLOYEE(string iD, string userName)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ASSIGN_TO_EMPLOYEE", iDParameter, userNameParameter);
        }
    
        public virtual int DELETE_EQUIP(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_EQUIP", iDParameter);
        }
    
        public virtual int DELETE_REQUEST(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_REQUEST", iDParameter);
        }
    
        public virtual int INSERT_EQUIPMENT(string type, string name, string status, string description)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_EQUIPMENT", typeParameter, nameParameter, statusParameter, descriptionParameter);
        }
    
        public virtual int INSERT_REQUEST(string userName, string equipmentType)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var equipmentTypeParameter = equipmentType != null ?
                new ObjectParameter("EquipmentType", equipmentType) :
                new ObjectParameter("EquipmentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_REQUEST", userNameParameter, equipmentTypeParameter);
        }
    
        public virtual ObjectResult<LIST_ALL_EQUIP_Result> LIST_ALL_EQUIP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LIST_ALL_EQUIP_Result>("LIST_ALL_EQUIP");
        }
    
        public virtual ObjectResult<LIST_EQUIP_ASSIGNED_Result> LIST_EQUIP_ASSIGNED(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LIST_EQUIP_ASSIGNED_Result>("LIST_EQUIP_ASSIGNED", userNameParameter);
        }
    
        public virtual int TICK_REQUEST(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TICK_REQUEST", iDParameter);
        }
    
        public virtual int UNASSIGN_EQUIPMENT(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UNASSIGN_EQUIPMENT", iDParameter);
        }
    
        public virtual int UPDATE_EQUIP(string iD, string type, string name, string status, string description)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_EQUIP", iDParameter, typeParameter, nameParameter, statusParameter, descriptionParameter);
        }
    }
}
